import React, { useState, useEffect } from 'react';
import { 
    GenerateSlice, 
    BubbleSort, 
    ParallelBatcherSort,
    QuickSort,
    TournamentSort,
    BinaryInsertionSort
} from "../wailsjs/go/main/App";
import './App.css';

function App() {
    const [array, setArray] = useState([]);
    const [sortedArray, setSortedArray] = useState([]);
    const [selectedAlgorithm, setSelectedAlgorithm] = useState('bubble');
    const [arraySize, setArraySize] = useState(50);
    const [isGenerating, setIsGenerating] = useState(false);
    const [isSorting, setIsSorting] = useState(false);
    const [sortTime, setSortTime] = useState(0);
    const [resultText, setResultText] = useState("–ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã");

    const algorithms = [
        { id: 'bubble', name: 'ü´ß –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', color: '#ff6b6b' },
        { id: 'quick', name: '‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', color: '#4ecdc4' },
        { id: 'batcher', name: 'üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ë—ç—Ç—á–µ—Ä–∞', color: '#45b7d1' },
        { id: 'tournament', name: 'üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', color: '#f9ca24' },
        { id: 'binary', name: 'üéØ –ë–∏–Ω–∞—Ä–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏', color: '#6c5ce7' }
    ];

    const generateArray = async () => {
        setIsGenerating(true);
        setResultText("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞...");
        
        try {
            const newArray = await GenerateSlice(arraySize);
            setArray(newArray);
            setSortedArray([]);
            setSortTime(0);
            setResultText(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–∞—Å—Å–∏–≤ –∏–∑ ${arraySize} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        } catch (error) {
            setResultText("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞");
        }
        
        setIsGenerating(false);
    };

    const sortArray = async () => {
        if (array.length === 0) {
            setResultText("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤!");
            return;
        }

        setIsSorting(true);
        const startTime = performance.now();
        setResultText("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...");

        try {
            let result = [];
            const selectedAlgo = algorithms.find(algo => algo.id === selectedAlgorithm);

            switch (selectedAlgorithm) {
                case 'bubble':
                    result = await BubbleSort(array);
                    break;
                case 'quick':
                    result = await QuickSort(array);
                    break;
                case 'batcher':
                    result = await ParallelBatcherSort(array);
                    break;
                case 'tournament':
                    result = await TournamentSort(array);
                    break;
                case 'binary':
                    result = await BinaryInsertionSort(array);
                    break;
                default:
                    result = await BubbleSort(array);
            }

            const endTime = performance.now();
            const duration = Math.round((endTime - startTime) * 100) / 100;

            setSortedArray(result);
            setSortTime(duration);
            setResultText(`${selectedAlgo.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}–º—Å`);
        } catch (error) {
            setResultText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ");
        }

        setIsSorting(false);
    };

    const getArrayDisplay = (arr) => {
        if (arr.length === 0) return "[ ]";
        if (arr.length > 20) {
            return `[${arr.slice(0, 10).join(', ')}, ..., ${arr.slice(-10).join(', ')}]`;
        }
        return `[${arr.join(', ')}]`;
    };

    useEffect(() => {
        generateArray();
    }, []);

    return (
        <div id="App">
            <div className="neon-container">
                <header className="app-header">
                    <h1 className="neon-title">
                        <span className="neon-text">SORT</span>
                        <span className="neon-accent">MASTER</span>
                    </h1>
                    <p className="subtitle">–í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</p>
                </header>

                <div className="main-content">
                    <div className="control-panel">
                        <div className="control-group">
                            <label className="control-label">–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞</label>
                            <div className="size-controls">
                                <input 
                                    type="range" 
                                    min="10" 
                                    max="200" 
                                    value={arraySize}
                                    onChange={(e) => setArraySize(parseInt(e.target.value))}
                                    className="neon-slider"
                                />
                                <span className="size-display">{arraySize}</span>
                            </div>
                        </div>

                        <div className="control-group">
                            <label className="control-label">–ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</label>
                            <div className="algorithm-selector">
                                {algorithms.map(algo => (
                                    <div 
                                        key={algo.id}
                                        className={`algorithm-card ${selectedAlgorithm === algo.id ? 'selected' : ''}`}
                                        style={{
                                            '--accent-color': algo.color,
                                            '--accent-glow': algo.color + '40'
                                        }}
                                        onClick={() => setSelectedAlgorithm(algo.id)}
                                    >
                                        <span className="algo-name">{algo.name}</span>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="action-buttons">
                            <button 
                                className={`neon-button generate ${isGenerating ? 'loading' : ''}`}
                                onClick={generateArray}
                                disabled={isGenerating}
                            >
                                {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üé≤ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤'}
                            </button>

                            <button 
                                className={`neon-button sort ${isSorting ? 'loading' : ''}`}
                                onClick={sortArray}
                                disabled={isSorting || array.length === 0}
                            >
                                {isSorting ? '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞...' : 'üöÄ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                            </button>
                        </div>
                    </div>

                    <div className="results-section">
                        <div className="status-display">
                            <div className="status-text">{resultText}</div>
                            {sortTime > 0 && (
                                <div className="performance-stats">
                                    <span className="stat">‚è±Ô∏è –í—Ä–µ–º—è: {sortTime}–º—Å</span>
                                    <span className="stat">üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {array.length}</span>
                                </div>
                            )}
                        </div>

                        <div className="arrays-display">
                            {array.length > 0 && (
                                <div className="array-container">
                                    <h3 className="array-title original">–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤</h3>
                                    <div className="array-content">
                                        {getArrayDisplay(array)}
                                    </div>
                                </div>
                            )}

                            {sortedArray.length > 0 && (
                                <div className="array-container">
                                    <h3 className="array-title sorted">–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤</h3>
                                    <div className="array-content">
                                        {getArrayDisplay(sortedArray)}
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                <div className="floating-particles">
                    {[...Array(20)].map((_, i) => (
                        <div key={i} className={`particle particle-${i % 4}`}></div>
                    ))}
                </div>
            </div>
        </div>
    );
}

export default App;
