package main

import (
	"fmt"
	"math"
	"time"
)

// –°—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ Go

const text string = "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å:\n1.Nill-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n2.–ß–∏—Å–ª–æ–≤—ã–µ-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n3.–ü–µ—Ä–µ–º–Ω–Ω—ã–µ - –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏\n4.–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã\n5.–°—Ç—Ä–æ–∫–æ–≤—ã–µ-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n6.–ú–∞—Å—Å–∏–≤—ã –∏ –°–ª–∞–π—Å—ã\n7.–°—Ç—Ä—É–∫—Ç—É—Ä—ã\n8.–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"

var choice int

func main() {
	fmt.Println(text)

	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
	fmt.Scanln(&choice)

	switch choice {
	case 1:
		nillValuables()
	case 2:
		digits()
	case 3:
		boolean()
	case 4:
		constants()
	case 5:
		strings()
	case 6:
		arrays_slices()
	case 7:
		strcuture()
	case 8:
		fmt.Println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
		return
	default:
		fmt.Println("–£ –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã")
		time.Sleep(time.Second * 2)
		main()
	}

}

func nillValuables() {
	//–ö–æ–≥–¥–∞ –º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è - –æ–Ω–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞
	var intNill int //—Å–æ–∑–¥–∞–ª–∏ 0 –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∞
	fmt.Println("intNill =", intNill)

	var strNill string
	var floatNill float64
	var bollNill bool

	fmt.Printf("strNill: Value %#v\n, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ —Ç–¥", strNill)
	fmt.Printf("floatNill: Value %#v\n, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ —Ç–¥", floatNill)
	fmt.Printf("boolNill: Value %#v\n, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ —Ç–¥", bollNill)

	intNill = 5 //–ü—Ä–∏—Å–≤–æ–∏–º 5
	fmt.Println("intNill =", intNill)

	time.Sleep(time.Second * 2)
	main()
}

func digits() {
	fmt.Println("–°–æ–∑–¥—ë–º –≤—Å–µ –≤–∏–¥—ã —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
	fmt.Println("")
	fmt.Println("–°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∏–ø—ã int (–æ–Ω–∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è —Ç–µ–º –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å)")

	var valuableInt int
	var valuableInt8 int8
	var valuableInt32 int32
	var valuableInt64 int64

	// –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è signed int —Ç–∏–ø–æ–≤
	valuableInt = math.MaxInt
	valuableInt8 = math.MaxInt8   // 127
	valuableInt32 = math.MaxInt32 // 2147483647
	valuableInt64 = math.MaxInt64 // 9223372036854775807

	fmt.Printf("valuableInt: Value %d, Int\n", valuableInt)
	fmt.Printf("valuableInt8: Value %d, Int8\n", valuableInt8)
	fmt.Printf("valuableInt32: Value %d, Int32\n", valuableInt32)
	fmt.Printf("valuableInt64: Value %d, Int64\n", valuableInt64)

	fmt.Println("")
	fmt.Println("–°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∏–ø—ã uint (–±–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)")

	var valuableUint uint
	var valuableUint8 uint8
	var valuableUint32 uint32
	var valuableUint64 uint64

	// –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è unsigned int —Ç–∏–ø–æ–≤
	valuableUint = math.MaxUint     // –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
	valuableUint8 = math.MaxUint8   // 255
	valuableUint32 = math.MaxUint32 // 4294967295
	valuableUint64 = math.MaxUint64 // 18446744073709551615

	fmt.Printf("valuableUint: Value %d, Uint\n", valuableUint)
	fmt.Printf("valuableUint8: Value %d, Uint8\n", valuableUint8)
	fmt.Printf("valuableUint32: Value %d, Uint32\n", valuableUint32)
	fmt.Printf("valuableUint64: Value %d, Uint64\n", valuableUint64)

	fmt.Println("")
	fmt.Println("–°–æ–∑–¥–∞—ë–º —Ç–∏–ø—ã —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π")

	var valuableFloat32 float32
	var valuableFloat64 float64

	// –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è float —Ç–∏–ø–æ–≤
	valuableFloat32 = math.MaxFloat32 // –ø—Ä–∏–º–µ—Ä–Ω–æ 3.4028235e+38
	valuableFloat64 = math.MaxFloat64 // –ø—Ä–∏–º–µ—Ä–Ω–æ 1.7976931348623157e+308

	fmt.Printf("valuableFloat32: Value %v, float32\n", valuableFloat32)
	fmt.Printf("valuableFloat64: Value %v, float64\n", valuableFloat64)

	time.Sleep(time.Second * 2)
	main()
}

func boolean() {
	fmt.Println("Bool –∑–Ω–∞—á–µ–Ω–∏—è")

	True := true
	False := false
	fmt.Println("True:", True, "False:", False)

	True = False
	False = true
	fmt.Println("True:", True, "False:", False)

	time.Sleep(time.Second * 2)
	main()
}

func constants() {
	fmt.Println("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã")
	fmt.Println("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã - —ç—Ç–æ –ø–µ–µ–º–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–∑–¥–∞–ª–∏ –∏ –±–æ–ª—å—à–µ –Ω–µ –º–µ–Ω—è–µ–º. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞")

	const s string = "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã"

	fmt.Printf("–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞: %#v", s)
	// s = "–ò–∑–º–µ–Ω—è–µ–º" //–≠—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

	time.Sleep(time.Second * 2)
	main()
}

func strings() {
	fmt.Println("")
	fmt.Println("–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏")
	// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
	var emptyString string
	var simpleString string = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
	shortString := "–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"

	fmt.Printf("emptyString: %#v (–¥–ª–∏–Ω–∞: %d)\n", emptyString, len(emptyString))
	fmt.Printf("simpleString: %#v (–¥–ª–∏–Ω–∞: %d)\n", simpleString, len(simpleString))
	fmt.Printf("shortString: %#v (–¥–ª–∏–Ω–∞: %d)\n", shortString, len(shortString))

	// –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
	multilineString := `–≠—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
–û–Ω–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫.
–ò —Å–∏–º–≤–æ–ª—ã "–∫–∞–≤—ã—á–∫–∏" –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.`

	fmt.Printf("multilineString:\n%s\n", multilineString)

	// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
	escapedString := "–°—Ç—Ä–æ–∫–∞ —Å \"–∫–∞–≤—ã—á–∫–∞–º–∏\" –∏ \n–ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –∏ \t—Ç–∞–±—É–ª—è—Ü–∏–µ–π"
	fmt.Printf("escapedString: %s\n", escapedString)

	// –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
	firstName := "–ò–≤–∞–Ω"
	lastName := "–ü–µ—Ç—Ä–æ–≤"
	fullName := firstName + " " + lastName
	fmt.Printf("–ü–æ–ª–Ω–æ–µ –∏–º—è: %s\n", fullName)

	// –†–∞–±–æ—Ç–∞ —Å Unicode –∏ —Ä—É–Ω–∞–º–∏
	unicodeString := "–ü—Ä–∏–≤–µ—Ç üöÄ –º–∏—Ä!"
	fmt.Printf("Unicode —Å—Ç—Ä–æ–∫–∞: %s\n", unicodeString)
	fmt.Printf("–î–ª–∏–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö: %d\n", len(unicodeString))
	fmt.Printf("–î–ª–∏–Ω–∞ –≤ —Ä—É–Ω–∞—Ö: %d\n", len([]rune(unicodeString)))

	// –ü–µ—Ä–µ–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –±–∞–π—Ç–æ–≤
	fmt.Print("–ë–∞–π—Ç—ã: ")
	for i := 0; i < len(unicodeString); i++ {
		fmt.Printf("%d ", unicodeString[i])
	}
	fmt.Println()

	// –ü–µ—Ä–µ–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Ä—É–Ω
	fmt.Print("–†—É–Ω—ã: ")
	for _, r := range unicodeString {
		fmt.Printf("%c ", r)
	}
	fmt.Println()

	// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤
	numberStr := "42"
	fmt.Printf("–°—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–∞: %#v\n", numberStr)

	// –°—Ç—Ä–æ–∫–∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã –≤ Go
	originalString := "–ù–µ–∏–∑–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"
	fmt.Printf("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: %s\n", originalString)

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
	newString := originalString + " –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞"
	fmt.Printf("–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: %s\n", newString)

	// –°—Ä–µ–∑—ã —Å—Ç—Ä–æ–∫ (substring)
	testString := "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–µ–∑–∞"
	fmt.Printf("–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: %s\n", testString)
	fmt.Printf("–°—Ä–µ–∑ [0:8]: %s\n", testString[0:8])
	fmt.Printf("–°—Ä–µ–∑ [9:]: %s\n", testString[9:])

	// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
	str1 := "apple"
	str2 := "banana"
	str3 := "apple"

	fmt.Printf("'%s' == '%s': %t\n", str1, str2, str1 == str2)
	fmt.Printf("'%s' == '%s': %t\n", str1, str3, str1 == str3)
	fmt.Printf("'%s' < '%s': %t (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)\n", str1, str2, str1 < str2)

	// Raw strings —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
	rawString := `C:\Users\Name\Documents\file.txt`
	fmt.Printf("Raw string (–ø—É—Ç—å): %s\n", rawString)

	// –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ vs nil
	var nilString string
	emptyStr := ""
	fmt.Printf("nil —Å—Ç—Ä–æ–∫–∞: %#v (–ø—É—Å—Ç–∞—è: %t)\n", nilString, nilString == "")
	fmt.Printf("–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: %#v (–ø—É—Å—Ç–∞—è: %t)\n", emptyStr, emptyStr == "")
	fmt.Printf("nil == empty: %t\n", nilString == emptyStr)

	fmt.Println("=== –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ ===")

	time.Sleep(time.Second * 2)
	main()
}

func arrays_slices() {
	fmt.Println("")
	fmt.Println("=== –ú–∞—Å—Å–∏–≤—ã –∏ –°–ª–∞–π—Å—ã ===")
	fmt.Println("–ú–∞—Å—Å–∏–≤ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
	fmt.Println("–°–ª–∞–π—Å - –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è")
	fmt.Println("")

	// ===== –ú–ê–°–°–ò–í–´ =====
	fmt.Println("--- –ú–ê–°–°–ò–í–´ ---")

	// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (—Ä–∞–∑–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π!)
	var numbers [3]int // [0 0 0]
	fmt.Printf("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤: %v\n", numbers)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤
	numbers[0] = 10
	numbers[1] = 20
	numbers[2] = 30
	fmt.Printf("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: %v\n", numbers)

	// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ä–∞–∑—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
	fruits := [3]string{"—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–≤–∏—à–Ω—è"}
	fmt.Printf("–ú–∞—Å—Å–∏–≤ —Ñ—Ä—É–∫—Ç–æ–≤: %v\n", fruits)
	fmt.Printf("–î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞: %d\n", len(fruits))

	fmt.Println("")

	// ===== –°–õ–ê–ô–°–´ =====
	fmt.Println("--- –°–õ–ê–ô–°–´ ---")

	// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ª–∞–π—Å–∞
	var colors []string
	fmt.Printf("–ü—É—Å—Ç–æ–π —Å–ª–∞–π—Å: %v (nil: %t)\n", colors, colors == nil)

	// –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ª–∞–π—Å
	colors = append(colors, "–∫—Ä–∞—Å–Ω—ã–π")
	colors = append(colors, "—Å–∏–Ω–∏–π", "–∑–µ–ª–µ–Ω—ã–π")
	fmt.Printf("–°–ª–∞–π—Å —Å —Ü–≤–µ—Ç–∞–º–∏: %v\n", colors)
	fmt.Printf("–î–ª–∏–Ω–∞: %d, –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: %d\n", len(colors), cap(colors))

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π—Å–∞ —Å—Ä–∞–∑—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
	animals := []string{"–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–ø—Ç–∏—Ü–∞"}
	fmt.Printf("–°–ª–∞–π—Å –∂–∏–≤–æ—Ç–Ω—ã—Ö: %v\n", animals)

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π—Å–∞ —Å make
	grades := make([]int, 3) // —Å–æ–∑–¥–∞–µ—Ç —Å–ª–∞–π—Å –¥–ª–∏–Ω–æ–π 3
	grades[0] = 85
	grades[1] = 92
	grades[2] = 78
	fmt.Printf("–û—Ü–µ–Ω–∫–∏: %v\n", grades)

	fmt.Println("")

	// ===== –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò =====
	fmt.Println("--- –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ---")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–ª–∞–π—Å–∞
	letters := []string{"A", "B", "C", "D", "E"}
	fmt.Printf("–í—Å–µ –±—É–∫–≤—ã: %v\n", letters)
	fmt.Printf("–ü–µ—Ä–≤—ã–µ 3: %v\n", letters[:3])       // [A B C]
	fmt.Printf("–° 2-–π –¥–æ –∫–æ–Ω—Ü–∞: %v\n", letters[2:]) // [C D E]
	fmt.Printf("–°—Ä–µ–¥–Ω–∏–µ: %v\n", letters[1:4])       // [B C D]

	// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	letters[0] = "Z"
	fmt.Printf("–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: %v\n", letters)

	// –ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	fmt.Print("–ü–µ—Ä–µ–±–æ—Ä —Å–ª–∞–π—Å–∞: ")
	for i, letter := range letters {
		fmt.Printf("%d:%s ", i, letter)
	}
	fmt.Println()

	fmt.Println("")

	// ===== –ì–õ–ê–í–ù–´–ï –†–ê–ó–õ–ò–ß–ò–Ø =====
	fmt.Println("--- –†–ê–ó–õ–ò–ß–ò–Ø ---")

	// –ú–∞—Å—Å–∏–≤: —Ä–∞–∑–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
	array := [2]int{1, 2}
	fmt.Printf("–ú–∞—Å—Å–∏–≤: %v (—Ä–∞–∑–º–µ—Ä –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å)\n", array)

	// –°–ª–∞–π—Å: —Ä–∞–∑–º–µ—Ä –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å
	slice := []int{1, 2}
	slice = append(slice, 3, 4, 5)
	fmt.Printf("–°–ª–∞–π—Å: %v (—Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è!)\n", slice)

	// –î–ª–∏–Ω–∞ –∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
	fmt.Printf("–£ —Å–ª–∞–π—Å–∞ len=%d, cap=%d\n", len(slice), cap(slice))
	fmt.Printf("–£ –º–∞—Å—Å–∏–≤–∞ —Ç–æ–ª—å–∫–æ len=%d\n", len(array))

	fmt.Println("=== –ö–æ–Ω–µ—Ü ===")

	time.Sleep(time.Second * 2)
	main()
}

type Person struct {
	Name string
	Age  int
}

func strcuture() {
	fmt.Println("–°—Ç—Ä—É–∫—Ç—É—Ä—ã")
	fmt.Println("–°—Ç—Ä—É–∫—Ç—É—Ä—ã - —ç—Ç–æ –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
	fmt.Println("–°—Ç—Ä—É–∫—Ç—É—Ä—ã —ç—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö")

	// type Person struct {
	// 	Name string
	// 	Age  int
	// }

	Ilya := Person{Name: "–ò–ª—å—è", Age: 18}

	fmt.Println(Ilya)
	fmt.Printf("–ú–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ Name: %s, Age: %d\n", Ilya.Name, Ilya.Age)

	Ilya.PrintName() //–ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π(–¢–æ–ª—å–∫–æ —ç—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç —ç—Ç–∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è—ã)
	time.Sleep(time.Second * 2)
	main()
}

func (p Person) PrintName() {
	fmt.Println(p.Name)
}
