package main

import (
	"runtime"
	"testing"
	"time"
)

// ============================================
// –ë–ï–ù–ß–ú–ê–†–ö–ò –î–õ–Ø –û–¢–î–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô
// ============================================

// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ create_population
func BenchmarkCreatePopulation(b *testing.B) {
	individuals := []string{"hfksfbnrugdkfnt ", "lfjgntcgasdtrcjd", "pqwlrbc dhfyriem"}

	b.ReportAllocs() // –í–∫–ª—é—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∞–ª–ª–æ–∫–∞—Ü–∏—è–º –ø–∞–º—è—Ç–∏
	b.ResetTimer()   // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

	for i := 0; i < b.N; i++ {
		_ = create_population(individuals)
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ distance_haminga
func BenchmarkDistanceHaminga(b *testing.B) {
	population := []string{"hfksfbnrugdkfnt ", "lfjgntcgasdtrcjd", "pqwlrbc dhfyriem"}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		_ = distance_haminga(BASE_STRING, population)
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ sort_the_best_individs
func BenchmarkSortTheBestIndivids(b *testing.B) {
	// –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é map
	testMap := map[int]string{
		5:    "test string one ",
		10:   "test string two ",
		3:    "test string thr ",
		1003: "duplicate dist 3",
	}

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		_, _ = sort_the_best_individs(testMap)
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ mutation
func BenchmarkMutation(b *testing.B) {
	individual := "the rule is good"

	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		_ = mutation(individual, CHARSET)
	}
}

// ============================================
// –ë–ï–ù–ß–ú–ê–†–ö –î–õ–Ø –í–°–ï–ì–û –ì–ï–ù–ï–¢–ò–ß–ï–°–ö–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê
// ============================================

// –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–º–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π)
func BenchmarkGeneticAlgorithmSmall(b *testing.B) {
	b.ReportAllocs()

	for i := 0; i < b.N; i++ {
		runGeneticAlgorithm(10) // 10 –ø–æ–∫–æ–ª–µ–Ω–∏–π
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π)
func BenchmarkGeneticAlgorithmMedium(b *testing.B) {
	b.ReportAllocs()

	for i := 0; i < b.N; i++ {
		runGeneticAlgorithm(100) // 100 –ø–æ–∫–æ–ª–µ–Ω–∏–π
	}
}

// –ë–µ–Ω—á–º–∞—Ä–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π)
func BenchmarkGeneticAlgorithmLarge(b *testing.B) {
	b.ReportAllocs()

	for i := 0; i < b.N; i++ {
		runGeneticAlgorithm(1000) // 1000 –ø–æ–∫–æ–ª–µ–Ω–∏–π
	}
}

// ============================================
// –¢–ï–°–¢–´ –ü–ê–ú–Ø–¢–ò –° –î–ï–¢–ê–õ–¨–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–û–ô
// ============================================

// –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—Å–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
func TestMemoryUsage(t *testing.T) {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º GC –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
	runtime.GC()

	var m1, m2 runtime.MemStats
	runtime.ReadMemStats(&m1)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º
	runGeneticAlgorithm(100)

	runtime.ReadMemStats(&m2)

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	allocatedMemory := m2.TotalAlloc - m1.TotalAlloc
	currentMemory := m2.Alloc - m1.Alloc
	numGC := m2.NumGC - m1.NumGC

	t.Logf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è 100 –ø–æ–∫–æ–ª–µ–Ω–∏–π:")
	t.Logf("   üíæ –í—Å–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: %d –±–∞–π—Ç (%.2f MB)", allocatedMemory, float64(allocatedMemory)/1024/1024)
	t.Logf("   üî• –¢–µ–∫—É—â–∞—è –ø–∞–º—è—Ç—å: %d –±–∞–π—Ç (%.2f KB)", currentMemory, float64(currentMemory)/1024)
	t.Logf("   üóëÔ∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GC —Ü–∏–∫–ª–æ–≤: %d", numGC)
	t.Logf("   üì¶ Heap –æ–±—ä–µ–∫—Ç–æ–≤: %d", m2.HeapObjects)
}

// –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ mutation
func TestMutationMemory(t *testing.T) {
	runtime.GC()

	var m1, m2 runtime.MemStats
	runtime.ReadMemStats(&m1)

	individual := "the rule is good"
	iterations := 1000

	for i := 0; i < iterations; i++ {
		_ = mutation(individual, CHARSET)
	}

	runtime.ReadMemStats(&m2)

	allocatedMemory := m2.TotalAlloc - m1.TotalAlloc

	t.Logf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è mutation (%d –∏—Ç–µ—Ä–∞—Ü–∏–π):", iterations)
	t.Logf("   üíæ –í—Å–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–æ: %d –±–∞–π—Ç (%.2f MB)", allocatedMemory, float64(allocatedMemory)/1024/1024)
	t.Logf("   üìà –ù–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é: %.2f KB", float64(allocatedMemory)/float64(iterations)/1024)
}

// ============================================
// –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –° –¢–ê–ô–ú–ï–†–û–ú
// ============================================

// –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
func TestPerformanceSpeed(t *testing.T) {
	tests := []struct {
		name        string
		generations int
	}{
		{"10 –ø–æ–∫–æ–ª–µ–Ω–∏–π", 10},
		{"100 –ø–æ–∫–æ–ª–µ–Ω–∏–π", 100},
		{"1000 –ø–æ–∫–æ–ª–µ–Ω–∏–π", 1000},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := time.Now()

			runGeneticAlgorithm(tt.generations)

			duration := time.Since(start)

			t.Logf("‚è±Ô∏è  %s –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞: %v", tt.name, duration)
			t.Logf("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–µ: %v", duration/time.Duration(tt.generations))
		})
	}
}

// ============================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ê
// ============================================

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å)
func runGeneticAlgorithm(maxGenerations int) (string, int) {
	individuals := []string{"hfksfbnrugdkfnt ", "lfjgntcgasdtrcjd", "pqwlrbc dhfyriem"}
	population := create_population(individuals)

	generation := 0
	bestDistance := 999999
	bestIndivid := ""

	for generation < maxGenerations {
		generation++

		distanceMap := distance_haminga(BASE_STRING, population)
		currentBests, currentDistance := sort_the_best_individs(distanceMap)
		currentBest := currentBests[0]

		if currentDistance < bestDistance {
			bestDistance = currentDistance
			bestIndivid = currentBest
		}

		if currentDistance == 0 {
			return currentBest, generation
		}

		population = mutation(currentBest, CHARSET)
	}

	return bestIndivid, generation
}

// ============================================
// –ü–†–û–î–í–ò–ù–£–¢–´–ô –ë–ï–ù–ß–ú–ê–†–ö –° –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï–ú
// ============================================

// –ë–µ–Ω—á–º–∞—Ä–∫ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ CPU
func BenchmarkWithCPUProfile(b *testing.B) {
	b.ReportAllocs()
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		b.StopTimer()
		individuals := []string{"hfksfbnrugdkfnt ", "lfjgntcgasdtrcjd", "pqwlrbc dhfyriem"}
		population := create_population(individuals)
		b.StartTimer()

		for gen := 0; gen < 100; gen++ {
			distanceMap := distance_haminga(BASE_STRING, population)
			currentBests, _ := sort_the_best_individs(distanceMap)
			population = mutation(currentBests[0], CHARSET)
		}
	}
}
